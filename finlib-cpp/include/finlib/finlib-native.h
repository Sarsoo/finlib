#pragma once

/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace finlibrs {

enum class CurveType : uint8_t
{
  Absolute,
  Differential,
};

enum class OptionStyle : uint8_t
{
  European,
  American,
};

enum class OptionType : uint8_t
{
  Call,
  Put,
};

enum class Side : uint8_t
{
  Buy,
  Sell,
};

struct Curve;

struct Mortgage;

struct OptionContract;

struct OptionSurfaceParameters;

struct OptionVariables;

struct OptionsSurface;

/// Describes a Portfolio as a collection of [`PortfolioAsset`]s
struct Portfolio;

/// Describes a single instrument as a list of previous values with an associated portfolio proportion
struct PortfolioAsset;

struct Price;

struct PricePair;

struct Strategy;

struct Swap;

struct NullableFloat
{
  double Val;
  bool IsValid;
};

struct Tuple
{
  double One;
  double Two;
  bool IsValid;
};


extern "C" {

NullableFloat covariance(const double *arr, size_t len, const double *arr_two, size_t len_two);

void curve_add_rate_from(Curve *curve,
                         double bid,
                         double offer,
                         int32_t year,
                         uint32_t month,
                         uint32_t day);

void curve_destroy(Curve *curve);

PricePair *curve_get_absolute_rate(Curve *curve, int32_t year, uint32_t month, uint32_t day);

PricePair *curve_get_carry_rate(Curve *curve,
                                int32_t from_year,
                                uint32_t from_month,
                                uint32_t from_day,
                                int32_t to_year,
                                uint32_t to_month,
                                uint32_t to_day);

PricePair *curve_get_cumulative_rate(Curve *curve, int32_t year, uint32_t month, uint32_t day);

PricePair *curve_get_rate(Curve *curve, int32_t year, uint32_t month, uint32_t day);

Curve *curve_new(CurveType curve_type);

size_t curve_size(Curve *curve);

NullableFloat historical_value_at_risk(const double *arr, size_t len, double confidence);

double interest_compound(double principal, double rate, double time, double n);

void mortgage_destroy(Mortgage *mortgage);

double mortgage_future_value(Mortgage *mortgage, double annual_interest_rate);

double mortgage_loan_value(Mortgage *mortgage);

double mortgage_ltv(Mortgage *mortgage);

double mortgage_monthly_payment(Mortgage *mortgage);

double mortgage_net_future_value_interest(Mortgage *mortgage, double annual_interest_rate);

Mortgage *mortgage_new(double purchase_price,
                       double deposit,
                       double interest_rate,
                       int32_t term_years);

double mortgage_present_value(Mortgage *mortgage);

double mortgage_total_interest(Mortgage *mortgage, double annual_interest_rate);

double mortgage_total_interest_repayment(Mortgage *mortgage);

double mortgage_total_repayment(Mortgage *mortgage);

void option_contract_destroy(OptionContract *option);

OptionContract *option_contract_from(OptionType option_type,
                                     OptionStyle option_style,
                                     Side side,
                                     double strike,
                                     double premium);

double option_contract_payoff(OptionContract *option, double underlying);

double option_contract_profit(OptionContract *option, double underlying);

bool option_contract_will_be_exercised(OptionContract *option, double underlying);

void option_surface_destroy(OptionsSurface *option);

void option_surface_generate(OptionsSurface *option);

void option_surface_par_generate(OptionsSurface *option);

void option_surface_parameters_destroy(OptionSurfaceParameters *option);

OptionSurfaceParameters *option_surface_parameters_from(ptrdiff_t underlying_price_range_min,
                                                        ptrdiff_t underlying_price_range_max,
                                                        double underlying_price_min,
                                                        double underlying_price_max,
                                                        ptrdiff_t strike_price_range_min,
                                                        ptrdiff_t strike_price_range_max,
                                                        double strike_price_min,
                                                        double strike_price_max,
                                                        ptrdiff_t volatility_range_min,
                                                        ptrdiff_t volatility_range_max,
                                                        double volatility_min,
                                                        double volatility_max,
                                                        ptrdiff_t risk_free_interest_rate_range_min,
                                                        ptrdiff_t risk_free_interest_rate_range_max,
                                                        double risk_free_interest_rate_min,
                                                        double risk_free_interest_rate_max,
                                                        ptrdiff_t dividend_range_min,
                                                        ptrdiff_t dividend_range_max,
                                                        double dividend_min,
                                                        double dividend_max,
                                                        ptrdiff_t time_to_expiration_range_min,
                                                        ptrdiff_t time_to_expiration_range_max,
                                                        double time_to_expiration_min,
                                                        double time_to_expiration_max);

OptionsSurface *option_surface_parameters_walk(OptionSurfaceParameters *option);

void option_vars_destroy(OptionVariables *option);

OptionVariables *option_vars_from(OptionType option_type,
                                  double underlying_price,
                                  double strike_price,
                                  double volatility,
                                  double risk_free_interest_rate,
                                  double dividend,
                                  double time_to_expiration);

void portfolio_add_asset(Portfolio *portfolio, PortfolioAsset *asset);

void portfolio_apply_rates_of_change(Portfolio *portfolio);

void portfolio_asset_apply_rates_of_change(PortfolioAsset *asset);

double portfolio_asset_current_total_value(PortfolioAsset *asset);

double portfolio_asset_current_value(PortfolioAsset *asset);

void portfolio_asset_destroy(PortfolioAsset *asset);

Tuple portfolio_asset_get_mean_and_std(PortfolioAsset *asset);

PortfolioAsset *portfolio_asset_new(const uint8_t *name,
                                    int32_t name_len,
                                    double quantity,
                                    const double *values,
                                    size_t len);

double portfolio_asset_payoff(PortfolioAsset *asset, NullableFloat underlying);

double portfolio_asset_profit(PortfolioAsset *asset, NullableFloat underlying);

NullableFloat portfolio_asset_profit_loss(PortfolioAsset *asset);

NullableFloat portfolio_asset_value_at_risk(PortfolioAsset *portfolio,
                                            double confidence,
                                            NullableFloat initial_investment);

NullableFloat portfolio_asset_value_at_risk_afer_time(PortfolioAsset *portfolio,
                                                      double confidence,
                                                      NullableFloat initial_investment,
                                                      ptrdiff_t at);

NullableFloat portfolio_asset_value_at_risk_percent(PortfolioAsset *portfolio, double confidence);

void portfolio_destroy(Portfolio *portfolio);

Tuple portfolio_get_mean_and_std(Portfolio *portfolio);

bool portfolio_is_valid(Portfolio *portfolio);

Portfolio *portfolio_new();

double portfolio_payoff(Portfolio *asset, NullableFloat underlying);

NullableFloat portfolio_profit_loss(Portfolio *asset);

size_t portfolio_size(Portfolio *portfolio);

bool portfolio_valid_sizes(Portfolio *portfolio);

NullableFloat portfolio_value_at_risk(Portfolio *portfolio,
                                      double confidence,
                                      NullableFloat initial_investment);

NullableFloat portfolio_value_at_risk_afer_time(Portfolio *portfolio,
                                                double confidence,
                                                NullableFloat initial_investment,
                                                ptrdiff_t at);

NullableFloat portfolio_value_at_risk_percent(Portfolio *portfolio, double confidence);

void price_destroy(Price *asset);

Side price_get_side(Price *price);

double price_get_val(Price *price);

Price *price_new(double price, Side side);

void price_pair_destroy(PricePair *asset);

double price_pair_get_bid(PricePair *price);

double price_pair_get_offer(PricePair *price);

double price_pair_midpoint(PricePair *price);

PricePair *price_pair_new(double bid, double offer);

void price_pair_set_bid(PricePair *price, double new_price);

void price_pair_set_offer(PricePair *price, double new_price);

double price_pair_spread(PricePair *price);

void price_set_side(Price *price, Side new_side);

void price_set_val(Price *price, double new_price);

double relative_strength_indicator(double time_period, double average_gain, double average_loss);

double relative_strength_indicator_smoothed(double time_period,
                                            double previous_average_gain,
                                            double current_gain,
                                            double previous_average_loss,
                                            double current_loss);

double scale_value_at_risk(double initial_value, ptrdiff_t time_cycles);

void strategy_add_option_component(Strategy *option, OptionContract *component);

void strategy_add_swap_component(Strategy *option, Swap *component);

void strategy_destroy(Strategy *option);

Strategy *strategy_new();

double strategy_payoff(Strategy *option, double underlying);

double strategy_profit(Strategy *option, double underlying);

size_t strategy_size(Strategy *option);

void swap_destroy(Swap *swap);

Swap *swap_from(double fixed_rate, Side fixed_side, double premium);

double swap_payoff(Swap *swap, double floating_rate);

double swap_payoff_from_multiple(Swap *swap, const double *values, size_t len);

double swap_profit(Swap *swap, double floating_rate);

double swap_profit_from_multiple(Swap *swap, const double *values, size_t len);

NullableFloat varcovar_value_at_risk(const double *arr, size_t len, double confidence);

}  // extern "C"

}  // namespace finlibrs
