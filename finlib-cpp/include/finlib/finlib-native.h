#pragma once

/* Generated with cbindgen:0.28.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace finlib {

/// Describes a Portfolio as a collection of [`PortfolioAsset`]s
struct Portfolio;

/// Describes a single instrument as a list of previous values with an associated portfolio proportion
struct PortfolioAsset;

struct NullableFloat
{
  double Val;
  bool IsValid;
};

struct Tuple
{
  double One;
  double Two;
  bool IsValid;
};


extern "C" {

NullableFloat covariance(const double *arr, size_t len, const double *arr_two, size_t len_two);

NullableFloat historical_value_at_risk(const double *arr, size_t len, double confidence);

double interest_compound(double principal, double rate, double time, double n);

void portfolio_add_asset(Portfolio *portfolio, PortfolioAsset *asset);

void portfolio_apply_rates_of_change(Portfolio *portfolio);

void portfolio_asset_apply_rates_of_change(PortfolioAsset *asset);

void portfolio_asset_destroy(PortfolioAsset *asset);

Tuple portfolio_asset_get_mean_and_std(PortfolioAsset *asset);

PortfolioAsset *portfolio_asset_new(double portfolio_weight,
                                    const uint8_t *name,
                                    int32_t name_len,
                                    const double *values,
                                    size_t len);

void portfolio_destroy(Portfolio *portfolio);

Tuple portfolio_get_mean_and_std(Portfolio *portfolio);

bool portfolio_is_valid(Portfolio *portfolio);

Portfolio *portfolio_new();

bool portfolio_valid_sizes(Portfolio *portfolio);

bool portfolio_valid_weights(Portfolio *portfolio);

NullableFloat portfolio_value_at_risk(Portfolio *portfolio,
                                      double confidence,
                                      double initial_investment);

NullableFloat portfolio_value_at_risk_percent(Portfolio *portfolio, double confidence);

double scale_value_at_risk(double initial_value, ptrdiff_t time_cycles);

NullableFloat varcovar_value_at_risk(const double *arr, size_t len, double confidence);

}  // extern "C"

}  // namespace finlib
