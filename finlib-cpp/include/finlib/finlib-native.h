#pragma once

/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace finlib {

enum class Side : uint8_t
{
  Buy,
  Sell,
};

struct Curve;

/// Describes a Portfolio as a collection of [`PortfolioAsset`]s
struct Portfolio;

/// Describes a single instrument as a list of previous values with an associated portfolio proportion
struct PortfolioAsset;

struct Price;

struct PricePair;

struct NullableFloat
{
  double Val;
  bool IsValid;
};

struct Tuple
{
  double One;
  double Two;
  bool IsValid;
};


extern "C" {

NullableFloat covariance(const double *arr, size_t len, const double *arr_two, size_t len_two);

void curve_add_rate_from(Curve *curve,
                         double bid,
                         double offer,
                         int32_t year,
                         uint32_t month,
                         uint32_t day);

void curve_destroy(Curve *curve);

PricePair *curve_get_cumulative_rate(Curve *curve, int32_t year, uint32_t month, uint32_t day);

Curve *curve_new();

size_t curve_size(Curve *curve);

NullableFloat historical_value_at_risk(const double *arr, size_t len, double confidence);

double interest_compound(double principal, double rate, double time, double n);

void portfolio_add_asset(Portfolio *portfolio, PortfolioAsset *asset);

void portfolio_apply_rates_of_change(Portfolio *portfolio);

void portfolio_asset_apply_rates_of_change(PortfolioAsset *asset);

void portfolio_asset_destroy(PortfolioAsset *asset);

Tuple portfolio_asset_get_mean_and_std(PortfolioAsset *asset);

PortfolioAsset *portfolio_asset_new(double portfolio_weight,
                                    const uint8_t *name,
                                    int32_t name_len,
                                    const double *values,
                                    size_t len);

void portfolio_destroy(Portfolio *portfolio);

Tuple portfolio_get_mean_and_std(Portfolio *portfolio);

bool portfolio_is_valid(Portfolio *portfolio);

Portfolio *portfolio_new();

bool portfolio_valid_sizes(Portfolio *portfolio);

bool portfolio_valid_weights(Portfolio *portfolio);

NullableFloat portfolio_value_at_risk(Portfolio *portfolio,
                                      double confidence,
                                      double initial_investment);

NullableFloat portfolio_value_at_risk_percent(Portfolio *portfolio, double confidence);

void price_destroy(Price *asset);

Side price_get_side(Price *price);

double price_get_val(Price *price);

Price *price_new(double price, Side side);

void price_pair_destroy(PricePair *asset);

double price_pair_get_bid(PricePair *price);

double price_pair_get_offer(PricePair *price);

double price_pair_midpoint(PricePair *price);

PricePair *price_pair_new(double bid, double offer);

void price_pair_set_bid(PricePair *price, double new_price);

void price_pair_set_offer(PricePair *price, double new_price);

double price_pair_spread(PricePair *price);

void price_set_side(Price *price, Side new_side);

void price_set_val(Price *price, double new_price);

double relative_strength_indicator(double time_period, double average_gain, double average_loss);

double relative_strength_indicator_smoothed(double time_period,
                                            double previous_average_gain,
                                            double current_gain,
                                            double previous_average_loss,
                                            double current_loss);

double scale_value_at_risk(double initial_value, ptrdiff_t time_cycles);

NullableFloat varcovar_value_at_risk(const double *arr, size_t len, double confidence);

}  // extern "C"

}  // namespace finlib
