// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace FinLib
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "libfinlib_ffi";



        [DllImport(__DllName, EntryPoint = "interest_compound", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double interest_compound(double principal, double rate, double time, double n);

        [DllImport(__DllName, EntryPoint = "covariance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern NullableFloat covariance(double* arr, nuint len, double* arr_two, nuint len_two);

        [DllImport(__DllName, EntryPoint = "historical_value_at_risk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern NullableFloat historical_value_at_risk(double* arr, nuint len, double confidence);

        [DllImport(__DllName, EntryPoint = "varcovar_value_at_risk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern NullableFloat varcovar_value_at_risk(double* arr, nuint len, double confidence);

        [DllImport(__DllName, EntryPoint = "scale_value_at_risk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double scale_value_at_risk(double initial_value, nint time_cycles);

        [DllImport(__DllName, EntryPoint = "portfolio_asset_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PortfolioAsset_native* portfolio_asset_new(double portfolio_weight, byte* name, int name_len, double* values, nuint len);

        [DllImport(__DllName, EntryPoint = "portfolio_asset_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void portfolio_asset_destroy(PortfolioAsset_native* asset);

        [DllImport(__DllName, EntryPoint = "portfolio_asset_apply_rates_of_change", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void portfolio_asset_apply_rates_of_change(PortfolioAsset_native* asset);

        [DllImport(__DllName, EntryPoint = "portfolio_asset_get_mean_and_std", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Tuple portfolio_asset_get_mean_and_std(PortfolioAsset_native* asset);

        [DllImport(__DllName, EntryPoint = "portfolio_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Portfolio_native* portfolio_new();

        [DllImport(__DllName, EntryPoint = "portfolio_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void portfolio_destroy(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_add_asset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void portfolio_add_asset(Portfolio_native* portfolio, PortfolioAsset_native* asset);

        [DllImport(__DllName, EntryPoint = "portfolio_apply_rates_of_change", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void portfolio_apply_rates_of_change(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_valid_sizes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool portfolio_valid_sizes(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_valid_weights", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool portfolio_valid_weights(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_is_valid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool portfolio_is_valid(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_get_mean_and_std", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Tuple portfolio_get_mean_and_std(Portfolio_native* portfolio);

        [DllImport(__DllName, EntryPoint = "portfolio_value_at_risk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern NullableFloat portfolio_value_at_risk(Portfolio_native* portfolio, double confidence, double initial_investment);

        [DllImport(__DllName, EntryPoint = "portfolio_value_at_risk_percent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern NullableFloat portfolio_value_at_risk_percent(Portfolio_native* portfolio, double confidence);

        [DllImport(__DllName, EntryPoint = "relative_strength_indicator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double relative_strength_indicator(double time_period, double average_gain, double average_loss);

        [DllImport(__DllName, EntryPoint = "relative_strength_indicator_smoothed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double relative_strength_indicator_smoothed(double time_period, double previous_average_gain, double current_gain, double previous_average_loss, double current_loss);

        [DllImport(__DllName, EntryPoint = "price_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Price_native* price_new(double price, Side_native side);

        [DllImport(__DllName, EntryPoint = "price_set_val", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_set_val(Price_native* price, double new_price);

        [DllImport(__DllName, EntryPoint = "price_set_side", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_set_side(Price_native* price, Side_native new_side);

        [DllImport(__DllName, EntryPoint = "price_get_val", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double price_get_val(Price_native* price);

        [DllImport(__DllName, EntryPoint = "price_get_side", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Side_native price_get_side(Price_native* price);

        [DllImport(__DllName, EntryPoint = "price_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_destroy(Price_native* asset);

        [DllImport(__DllName, EntryPoint = "price_pair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PricePair_native* price_pair_new(double bid, double offer);

        [DllImport(__DllName, EntryPoint = "price_pair_set_bid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_pair_set_bid(PricePair_native* price, double new_price);

        [DllImport(__DllName, EntryPoint = "price_pair_set_offer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_pair_set_offer(PricePair_native* price, double new_price);

        [DllImport(__DllName, EntryPoint = "price_pair_get_bid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double price_pair_get_bid(PricePair_native* price);

        [DllImport(__DllName, EntryPoint = "price_pair_get_offer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double price_pair_get_offer(PricePair_native* price);

        [DllImport(__DllName, EntryPoint = "price_pair_spread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double price_pair_spread(PricePair_native* price);

        [DllImport(__DllName, EntryPoint = "price_pair_midpoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double price_pair_midpoint(PricePair_native* price);

        [DllImport(__DllName, EntryPoint = "price_pair_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void price_pair_destroy(PricePair_native* asset);

        [DllImport(__DllName, EntryPoint = "curve_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Curve_native* curve_new();

        [DllImport(__DllName, EntryPoint = "curve_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint curve_size(Curve_native* curve);

        [DllImport(__DllName, EntryPoint = "curve_add_rate_from", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void curve_add_rate_from(Curve_native* curve, double bid, double offer, int year, uint month, uint day);

        [DllImport(__DllName, EntryPoint = "curve_get_cumulative_rate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PricePair_native* curve_get_cumulative_rate(Curve_native* curve, int year, uint month, uint day);

        [DllImport(__DllName, EntryPoint = "curve_destroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void curve_destroy(Curve_native* curve);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Tuple
    {
        public double one;
        public double two;
        [MarshalAs(UnmanagedType.U1)] public bool is_valid;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct NullableFloat
    {
        public double val;
        [MarshalAs(UnmanagedType.U1)] public bool is_valid;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Portfolio_native
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PortfolioAsset_native
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Price_native
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PricePair_native
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Curve_native
    {
    }


    internal enum Side_native : byte
    {
        Buy,
        Sell,
    }


}
